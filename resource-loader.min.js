class TATILResourceLoader{constructor(){this.resources = [];this.loadedResources = 0;this.errors = 0;this.connectionType = 'unknown';this.effectiveType = '4g';this.timeoutDuration = 15000;this.maxRetries = 3;this.cdnBase = 'https://cdn.jsdelivr.net/gh/Kelsean868/TATILraters@main/';this.localBase = './';this.useCDN = true;this.offlineMode = false;this.coreResources = [{type:'script',path:'js/rater-core.min.js',loaded:false,required:true,retries:0},{type:'style',path:'css/rater-styles.min.css',loaded:false,required:true,retries:0}];this.secondaryResources = [{type:'script',path:'js/motor-rater.min.js',loaded:false,required:false,retries:0},{type:'script',path:'js/property-rater.min.js',loaded:false,required:false,retries:0},{type:'script',path:'js/marine-rater.min.js',loaded:false,required:false,retries:0},{type:'script',path:'js/liability-rater.min.js',loaded:false,required:false,retries:0},{type:'style',path:'css/themes.min.css',loaded:false,required:false,retries:0}];this.enhancementResources = [{type:'script',path:'js/animations.min.js',loaded:false,required:false,retries:0},{type:'script',path:'js/analytics.min.js',loaded:false,required:false,retries:0},{type:'script',path:'js/charts.min.js',loaded:false,required:false,retries:0}]}initialize(){this.updateLoadingStatus('Initializing resource loader...');if(!navigator.onLine){this.offlineMode = true;this.updateLoadingStatus('Working offline. Loading cached resources...');this.setupOfflineListeners()}this.detectConnection().then(()=>{this.adjustForConnectionSpeed();this.prepareResourcesList();this.updateLoadingStatus('Loading essential resources...');this.loadNextBatch()})}async detectConnection(){return new Promise((resolve)=>{if('connection' in navigator){const connection = navigator.connection;this.connectionType = connection.type || 'unknown';this.effectiveType = connection.effectiveType || '4g';this.downlink = connection.downlink || 10;this.rtt = connection.rtt || 50;connection.addEventListener('change',this.handleConnectionChange.bind(this));this.updateConnectionIndicator();this.updateLoadingStatus(`Connection detected:${this.effectiveType}(${this.downlink}Mbps)`);resolve()}else{const startTime = performance.now();fetch(this.getResourceUrl('ping.json')).then(response => response.json()).then(()=>{const endTime = performance.now();const duration = endTime - startTime;if(duration < 100){this.effectiveType = '4g';this.downlink = 10}else if(duration < 500){this.effectiveType = '3g';this.downlink = 1.5}else{this.effectiveType = 'slow-2g';this.downlink = 0.5}this.updateConnectionIndicator();this.updateLoadingStatus(`Connection estimated:${this.effectiveType}`);resolve()}).catch(()=>{this.effectiveType = 'slow-2g';this.downlink = 0.5;this.updateConnectionIndicator();this.updateLoadingStatus('Connection test failed,assuming slow connection');resolve()})}})}handleConnectionChange(){if('connection' in navigator){const connection = navigator.connection;this.connectionType = connection.type || 'unknown';this.effectiveType = connection.effectiveType || '4g';this.downlink = connection.downlink || 10;this.rtt = connection.rtt || 50;this.updateConnectionIndicator();this.adjustForConnectionSpeed()}}updateConnectionIndicator(){const indicator = document.getElementById('connectionIndicator');const connectionText = document.getElementById('connectionText');if(indicator && connectionText){indicator.classList.remove('connection-slow','connection-medium','connection-fast');if(this.effectiveType === 'slow-2g' || this.effectiveType === '2g'){connectionText.textContent = `Slow Connection(${this.effectiveType})`;indicator.classList.add('connection-slow')}else if(this.effectiveType === '3g'){connectionText.textContent = `Medium Connection(${this.effectiveType})`;indicator.classList.add('connection-medium')}else{connectionText.textContent = `Fast Connection(${this.effectiveType})`;indicator.classList.add('connection-fast')}indicator.style.display = 'block'}}adjustForConnectionSpeed(){if(this.effectiveType === 'slow-2g' || this.effectiveType === '2g'){this.timeoutDuration = 30000;this.useCDN = true}else if(this.effectiveType === '3g'){this.timeoutDuration = 20000;this.useCDN = true}else{this.timeoutDuration = 15000;this.useCDN = true}}prepareResourcesList(){this.resources = [...this.coreResources];if(this.effectiveType !== 'slow-2g' && this.effectiveType !== '2g'){this.resources = [...this.resources,...this.secondaryResources]}if(this.effectiveType === '4g' || this.effectiveType === '5g'){this.resources = [...this.resources,...this.enhancementResources]}}getResourceUrl(path){return this.useCDN ? this.cdnBase + path:this.localBase + path}loadNextBatch(){const unloadedResources = this.resources.filter(resource => !resource.loaded);if(unloadedResources.length === 0){this.finishLoading();return}if(this.effectiveType === 'slow-2g' || this.effectiveType === '2g'){const resource = unloadedResources[0];this.loadResource(resource)}else{unloadedResources.forEach(resource =>{this.loadResource(resource)})}}loadResource(resource){const url = this.getResourceUrl(resource.path);this.updateLoadingStatus(`Loading:${resource.path.split('/').pop()}`);const timeoutPromise = new Promise((_,reject)=>{setTimeout(()=>{reject(new Error(`Loading ${resource.path}timed out after ${this.timeoutDuration}ms`))},this.timeoutDuration)});let element;if(resource.type === 'script'){element = document.createElement('script');element.src = url;element.async = true}else if(resource.type === 'style'){element = document.createElement('link');element.rel = 'stylesheet';element.href = url}const loadPromise = new Promise((resolve,reject)=>{element.onload =()=>{resource.loaded = true;this.loadedResources++;resolve()};element.onerror =(error)=>{reject(error)};document.head.appendChild(element)});Promise.race([loadPromise,timeoutPromise]).catch(error =>{console.error(`Error loading ${resource.path}:`,error);resource.retries++;if(resource.retries < this.maxRetries){if(this.useCDN){console.log(`Retrying ${resource.path}with local fallback`);this.useCDN = false;this.loadResource(resource)}else{console.log(`Retrying ${resource.path}(attempt ${resource.retries + 1}/${this.maxRetries})`);setTimeout(()=>{this.loadResource(resource)},1000)}}else if(resource.required){this.errors++;this.showError(`Failed to load required resource:${resource.path}`)}else{console.warn(`Skipping non-essential resource:${resource.path}`);resource.loaded = true;this.loadNextBatch()}}).then(()=>{if(this.resources.every(r => r.loaded)){this.finishLoading()}else if(this.effectiveType === 'slow-2g' || this.effectiveType === '2g'){this.loadNextBatch()}})}finishLoading(){this.updateLoadingStatus('Finalizing...');setTimeout(()=>{document.getElementById('loadingScreen').style.display = 'none';document.getElementById('mainContent').style.display = 'block';if(typeof window.initTATILRaters === 'function'){window.initTATILRaters()}else{console.error('TATIL Raters initialization function not found');this.showError('Application initialization failed')}this.preloadRemainingResources()},500)}preloadRemainingResources(){if(this.effectiveType === 'slow-2g' || this.effectiveType === '2g'){const remainingResources = [ ...this.secondaryResources,...this.enhancementResources ].filter(r => !this.resources.some(loaded => loaded.path === r.path));this.resources = [...this.resources,...remainingResources];this.loadNextBatch()}}updateLoadingStatus(message){const loadingStatus = document.getElementById('loadingStatus');if(loadingStatus){loadingStatus.textContent = message}}showError(message){const errorElement = document.getElementById('errorMessage');const errorText = document.getElementById('errorText');const loadingScreen = document.getElementById('loadingScreen');if(errorElement && errorText){errorText.textContent = message;errorElement.style.display = 'block';if(loadingScreen){loadingScreen.style.display = 'none'}}else{alert(`Error:${message}`)}}setupOfflineListeners(){window.addEventListener('online',()=>{this.offlineMode = false;document.getElementById('offlineIndicator').style.display = 'none';const failedResources = this.resources.filter(r => !r.loaded);if(failedResources.length > 0){failedResources.forEach(resource =>{resource.retries = 0;this.loadResource(resource)})}});window.addEventListener('offline',()=>{this.offlineMode = true;document.getElementById('offlineIndicator').style.display = 'block'})}}